html {
    box-sizing: border-box;
    /*resets the box model.*/
}

body {
    font-family: sans-serif;
    color: #0a0a23
}

/*This is a common set of properties used to ensure elements are completely hidden visually.
The span[class~="sr-only"] selector will select any 'span' element whose 'class' includes 'sr-only'*/

/*'!important' keyword ensures these properties are always applied, regardless of order or specificity*/
span[class~="sr-only"] {
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    /*used to define the visible portions of an element*/
    clip-path: inset(50%) !important;
    /*determines the shape the clip property should take*/
    -webkit-clip-path: inset(50%) !important;
    /*forms the clip-path into a rectangle within the element*/
    width: 1px !important;
    height: 1px !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    position: absolute !important;
    /*position to margin property, takes these hidden elements out of the document flow. 
    This will ensure that not only are they no longer visible, but they are not even within the page view*/
    padding: 0 !important;
    margin: -1px !important;
}

h1 {
    max-width: 37.25rem;
    margin: 0 auto;
    padding: 1.5rem 1.25rem
}

/*this targets the 'AcmeWidgetCorp' (1st element) and 'Balance Sheet' (2nd element)*/
h1 .flex {
    display: flex;
    /*enables the flexbox layout*/
    flex-direction: column-reverse;
    /*this will display the nested elements from bottom to top. thus making the element reversed*/
    gap: 1rem
        /* create some space between the elements*/
}

/*The ':first-of-type' pseudo-selector is used to target the first element that matches the selector*/
h1 .flex span:first-of-type {
    font-size: 0.7em
        /* makes 'AcmeWidgetCorp' look like a sub-heading*/
}

/*the ':last-of-type' target the last span in the 'h1' flex container*/
h1 .flex span:last-of-type {
    font-size: 1.2em
        /*makes 'Balnce Sheet' look a header*/
}

section {
    max-width: 40rem;
    /*for responsive design*/
    margin: 0 auto;
    /*centers it*/
    border: 2px solid #d0d0d5
}

#years {
    display: flex;
    justify-content: flex-end;
    /*Justify the content to the end of the flex direction*/
    position: sticky;
    /*makes the element sticky*/
    top: 0;
    color: #fff;
    background: #0a0a23;
    z-index: 999;
    /*Ensure the #years do not get hidden */
    margin: 0 -2px;
    padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0
        /*calc() function is a CSS function that allows one to calculate a value based on other values*/
}

/*The span[class] syntax will target any span element that has a class attribute set, regardless of the attribute's value*/
#years span[class] {
    text-align: right;
    font-weight: bold;
    width: 4.5rem;
}

.table-wrap {
    padding: 0 0.75rem 1.5rem 0.75rem
}

/*The :not() pseudo-selector is used to target all elements that do not match the selector - in this case, 
any of your span elements that do not have the span[class~="sr-only"] class. 
This ensures that your earlier rules for the sr-only class are not overwritten.*/
/*span:not(.sr-only) {
    font-weight: normal
}*/
/*afer the !important keyword was applied on 'span[class~="sr-only"] selector' above, 
':not(.sr-only)' was removed from the above allowing us to change the font-weight using just 'span' selector
span {
    font-weight: normal
}
The span elements now all have more specific styling below, which means the above span rule can be removed
*/

table {
    border-collapse: collapse;
    /*allow cell borders to collapse into a single border, instead of a border around each cell*/
    border: 0;
    /*hide the borders themselves*/
    width: 100%;
    position: relative;
    margin-top: 3rem
}

table caption {
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    top: -2.25rem;
    left: 0.5rem
}

/*fills the viewport. this ensures that the width is fixed*/
tbody td {
    width: 100vw;
    min-width: 4rem;
    max-width: 4rem
}

/*gives the 'th' a width of the entire container, less 12rem using the calc() function*/
tbody th {
    width: calc(100% - 12rem);
}

/*The [attribute="value"] selector targets any element that has an attribute with a specific value.
Thus, 'tr[class="total"]' target specifically the 'tr' elements with the 'total' class*/
tr[class="total"] {
    border-bottom: 4px double #0a0a23;
    font-weight: bold
}

tr[class="total"] th {
    text-align: left;
    padding: 0.5rem 0 0.25rem 0.5rem
}

/*The key difference between tr[class="total"] and 'tr.total' is that the first will select tr elements 
where the only class is total. The second will select 'tr' elements where the class includes total.*/
/*'tr.total td' target all 'td' elements within the '.total' rows.*/
tr.total td {
    text-align: right;
    padding: 0 0.25rem
}

/*The :nth-of-type() pseudo-selector is used to target specific elements based on their order 
among siblings of the same type*/
tr.total td:nth-of-type(3) {
    padding: 0.5rem
}

tr.total:hover {
    background-color: #99c9ff
}

td[class="current"] {
    font-style: italic
}

tr[class="data"] {
    background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
    text-align: left;
    padding-top: 0.3rem;
    padding-left: 0.5rem
}

/*'tr.data th .description' selector target the elements with the class set to description 
that are within the 'th' elements in the '.data' table rows*/
tr.data th .description {
    display: block;
    font-style: italic;
    font-weight: normal;
    padding: 1rem 0 0.75rem;
    margin-right: -13.5rem
}

tr.data td {
    vertical-align: top;
    /*shifts the text up (top) or down*/
    text-align: right;
    padding: 0.3rem 0.25rem 0
}

tr.data td:last-of-type{
    padding-right: 0.5rem;
}