* {
    box-sizing: border-box;
}

#gallery img {
    width: 25%;
    height: 300px;
    object-fit: cover;
    /*to determine how images should behave esp with diff img aspect ratio
    The cover property, tells the image to fill the img container while maintaining aspect ratio, 
    resulting in cropping to fit*/
    margin: 8px;
    padding: 0 4px;
    /*the margin and padding adds spaces in btw the imgs*/
    border-radius: 10px;
    /*Smooth out your images a bit*/

}

body {
    margin: 0;
    font-family: Arial;
    background-color: #EBE7E7;
}

.header {
    text-align: center;
    padding: 32px;
    /*all sides*/
    background: #E0DDDD;
}

/*Flexbox is a one-dimensional CSS layout approach that focuses on the flow of content.
It offers the ability to control the way items are spaced and aligned within a container.*/

#gallery {
    display: flex;
    /*Flexbox can be thought of as having two axes, the main axis and the cross axis. 
    The main axis is determined by the flex-direction property. If flex-direction is set to row or row-reverse, 
    the main axis is horizontal. If flex-direction is set to column or column-reverse, the main axis is vertical*/
    flex-direction: row;
    /*You may have noticed that your images have all moved onto the same row.
    The flex-wrap property determines how your items should behave when the flex container is too small.
    Setting this property to wrap will allow your items to wrap to the next row/column (depending on your main axis), 
    where nowrap will prevent your items from wrapping. When this is set to nowrap, items may either shrink to fit or 
    overflow.
    Give the #gallery selector a flex-wrap property set to wrap. You should see your images take a four-column layout.
    This is because you set their width to 25% in an earlier step.*/
    flex-wrap: wrap;
    /*The justify-content property determines how the items inside a flex container are positioned along the main axis,
    affecting their position and the space around them.*/
    justify-content: center;
    /*The align-items property positions the flex content along the cross axis. In this case, 
    with your flex-direction set to row, your cross axis would be vertical.*/
    align-items: center;
    padding: 0 4px;
}
/*Create a media query for screens smaller than 800px in width. In that media query, 
create a #gallery img rule and set the width property to 50%. This will convert your 
gallery to a two-column layout.*/
@media (max-width: 800px) {
    #gallery img{
        width: 50%
    }
}
/*Create a media query for screens smaller than 600px in width. In that media query, 
create a #gallery img rule and set the width property to 100%. This will convert your 
gallery to a single column layout.*/

@media (max-width: 600px) {
    #gallery img{
        width: 100%
    }
}