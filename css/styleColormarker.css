h1 {
    text-align: center;
}

.container {
    background-color: rgb(255, 255, 255);
    padding: 10px 0;
}

.marker {
    width: 200px;
    height: 25px;
    margin: 10px auto;
}

.cap {
    width: 60px;
    height: 25px;
}

.sleeve {
    width: 110px;
    height: 25px;
    background-color: rgba(255, 255, 255, 0.5);
    border-left: 10px double rgba(0, 0, 0, 0.75);
}
/*This is because the default display property for div elements is block. 
    So when two block elements are next to each other, they stack like actual blocks. 
    For example, your marker elements are all stacked on top of each other.
    To position two div elements on the same line, set their display properties to inline-block.
    Create a new rule to target both the cap and sleeve classes, and set display to inline-block.
    In the last project, you learned a little bit about borders and the border-color property.

All HTML elements have borders, though they're usually set to none by default. 
With CSS, you can control all aspects of an element's border, and set the border on all sides, 
or just one side at a time. For a border to be visible, you need to set its width and style.
In the .sleeve CSS rule, add the border-left-width property with the value 10px.
Borders have several styles to choose from. You can make your border a solid line, 
but you can also use a double, dashed or dotted line if you prefer. Solid border lines are probably the most common.
In the .sleeve CSS rule, add the border-left-style property with the value double.
The border-left shorthand property lets you to set the left border's width, style, and color at the same time.
Here is the syntax:

border-left: width style color;
*/
.cap,
.sleeve {
    display: inline-block; 
}

/* COLOR MANIPULATION
1) The linear-gradient function is very flexible -- 
here is the basic syntax you'll use in this tutorial:
linear-gradient(gradientDirection, color1, color2, ...);
gradientDirection is the direction of the line used for the transition.
color1 and color2 are color arguments, which are the colors that will be used in the transition itself. 
These can be any type of color, including color keywords, hex, rgb, or hsl.
Now you'll apply a red-to-green gradient along a 90 degree line to the first marker.
First, in the .red CSS rule, set the background property to linear-gradient(), 
and pass it the value 360deg as the gradientDirection.
As you can see, the linear-gradient function produced a smooth red-green gradient. 
While the linear-gradient function needs a minimum of two color arguments to work, 
it can accept many color arguments.
Use the rgb function to add pure blue as the third color argument to the linear-gradient function

1A)  Color-stops allow you to fine-tune where colors are placed along the gradient line. 
They are a length unit like px or percentages that follow a color in the linear-gradient function.
For example, in this red-black gradient, the transition from red to black takes place at the 90% point along 
the gradient line, so red takes up most of the available space:
linear-gradient(90deg, red 90%, black);
In the linear-gradient function, add a 75% color stop after the first red color argument.
Do not add color stops to the other colors arguments.

2)The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
The CSS hsl function accepts 3 values: a number from 0 to 360 for hue, a percentage from 0 to 100 for saturation, 
and a percentage from 0 to 100 for lightness.
If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.
Saturation is the intensity of a color from 0%, or gray, to 100% for pure color.
Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, 
with 50% being neutral.
In the .blue CSS rule, use the hsl function to change the background-color property to pure blue.
Set the hue to 240, the saturation to 100%, and the lightness to 50%.

3) A very common way to apply color to an element with CSS is with hexadecimal or hex values.
While hex values sound complicated, they're really just another form of RGB values.
Hex color values start with a # character and take six characters from 0-9 and A-F. 
The first pair of characters represent red, the second pair represent green, and the third pair represent blue. 
For example, #4B5320.
In the .green CSS rule, set the background-color property to a hex color code with the values 00 for red,
FF for green, and 00 blue.You may already be familiar with decimal, or base 10 values, which go from 0 - 9. 
Hexadecimal, or base 16 values, go from 0 - 9, then A - F:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
With hex colors, 00 is 0% of that color, and FF is 100%. So #00FF00 translates to 0% red, 100% green,
and 0% blue, and is the same as rgb(0, 255, 0).
Lower the intensity of green by setting green value of the hex color to 7F.

4) Opacity describes how opaque, or non-transparent, something is. For example, a solid wall is opaque, 
and no light can pass through. But a drinking glass is much more transparent, and you can see through 
the glass to the other side.
With the CSS opacity property, you can control how opaque or transparent an element is. 
With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, 
the element will be completely opaque like it is by default.
In the .sleeve CSS rule, set the opacity property to 0.5

5) Another way to set the opacity for an element is with the alpha channel. 
Similar to the opacity property, the alpha channel controls how transparent or opaque a color is.
You've already set sleeve's opacity with a named color and the opacity property, 
but you can add an alpha channel to the other CSS color properties.
You're already familiar with using the rgb function to set colors. To add an alpha channel to an rgb color,
use the rgba function instead.
The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel:

rgba(redValue, greenValue, blueValue, alphaValue);
In the .sleeve rule, use the rgba function to set the background-color property to pure white with 50% opacity.

6) The last thing you'll do is add a slight shadow to each marker to make them look even more realistic.
The box-shadow property lets you apply one or more shadows around an element. Here is basic syntax:
box-shadow: offsetX offsetY color;
Navigate between negative to positive numbers to set the shadow.

Notice that the edges of the shadow are sharp. This is because there is an optional blurRadius value 
for the box-shadow property:

box-shadow: offsetX offsetY blurRadius color;

If a blurRadius value isn't included, it defaults to 0 and produces sharp edges. 
The higher the value of blurRadius, the greater the blurring effect is.

But what if you wanted to expand the shadow out further? You can do that with the optional spreadRadius value:

box-shadow: offsetX offsetY blurRadius spreadRadius color;
Like blurRadius, spreadRadius defaults to 0 if it isn't included
*/
.red {
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    box-shadow: 0 0 20px 0 rgba(83, 14, 14, 0.8);
}
/*updating the color value of the red marker's box-shadow property.
Replace the named color with the rgba function. Use the values 83 for red, 14 for green, 
14 for blue and 0.8 for the alpha channel
the values for the box-shadow property: so offsetX is 0,offsetY is 0, blurRadius is 20px,
 spreadRadius is 0, and color is red*/
.green {
    background: linear-gradient(#55680D, #71F53E, #116C31);
    box-shadow: 0 0 20px 0 #3B7E20CC;
}
/*For the green marker's box-shadow property, replace the named color with a hex color code. 
Use the values 3B for red, 7E for green, 20 for blue, and CC for the alpha channel.

For the blue marker's box-shadow property, replace the named color with the hsla function. 
Use the values 223 for hue, 59% for saturation, 31% for lightness, and 0.8 for the alpha channel.*/

.blue {
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
    box-shadow: 0 0 20px 0 hsla(223, 59%, 31%, 0.8);
  }
/*The shadows for your green and blue markers will have the same position, blur, and spread. 
The only difference will be the colors.
In the .green and .blue CSS rules, update the values for the box-shadow 
properties so offsetX is 0,offsetY is 0, blurRadius is 20px, and spreadRadius is 0. 

*/